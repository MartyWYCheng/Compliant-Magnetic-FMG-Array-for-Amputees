%removes rest in add-on set, adds it to preexisting reduced signals and
%classes

%%% MANUALLY LOAD SIGNAL FIRST
%%% RUN remove_rest_01
%%% run code to replace class signal
%%% repeat for as many classes as needed
function signals_reduced = add_on_new(signals_reduced, classes_reduced, data, replace_class, classes_amount_replace, classes_amount, signal_port, class_port, remove_rise, remove_fall)
    
    sensor_amount = 24;
    signals_new = [];
    classes_new = [];
    
    %signals import
    signals_new = data{signal_port}.Values.data;
    
    %classes import and trim
    classes_new = data{class_port}.Values.data;
    classes_new(:,classes_amount_replace+1:width(classes_new)) = [];
    
    
    classes_new_combined = sum(classes_new,2); %classes is matrix of classes(column) with respect to trial time, combines all columns into one
    replace_class_deriv = diff(classes_new_combined);
    [PKS,LOC] = findpeaks(replace_class_deriv,'minpeakheight', 0.5);  %finds rising edges
    LOC_fall = find(replace_class_deriv == -1);
    
    signals_new_reduced = signals_new;
    classes_new_reduced = classes_new;
    classes_new_combined_reduced = classes_new_combined;
    
    
     remove_rise = remove_rise+1;
    % remove_fall = 0;
    %plot(class_combined.*signals);
    
    
        signals_new_reduced((LOC_fall(length(LOC_fall))-remove_fall:length(signals_new_reduced)),:) = [];    %removes end plus some of falling end
        classes_new_reduced((LOC_fall(length(LOC_fall))-remove_fall:length(classes_new_reduced)),:) = [];   
        
    for i = length(LOC_fall):-1:2
        signals_new_reduced(LOC_fall(i-1)-remove_fall:LOC(i)+remove_rise,:) = [];    %edit this, break time then how much of beginning of class to remove
        classes_new_reduced(LOC_fall(i-1)-remove_fall:LOC(i)+remove_rise,:) = [];
    end
        
        signals_new_reduced(1:LOC(1)+remove_rise,:) = [];    %remove beginning
        classes_new_reduced(1:LOC(1)+remove_rise,:) = [];
    
    %add new signal to old signal
    replace_class_deriv = diff(classes_reduced(:,replace_class));
    [PKS,LOC] = findpeaks(replace_class_deriv,'minpeakheight', 0.5);  %finds rising edges
    LOC_fall = find(replace_class_deriv == -1);
    
    if length(PKS)

    if replace_class == 1
        %signals_reduced(1,:) = [];
        signals_reduced(1:LOC_fall-2,:) = signals_new_reduced;
    elseif replace_class == classes_amount
         signals_reduced(LOC(end):end,:) = signals_new_reduced;
    elseif length(signals_reduced(LOC+1:LOC_fall,:)) ~= signals_new_reduced
        signals_reduced(LOC+1:LOC_fall,:) = signals_new_reduced;
    end
end
